// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  login     String
  password  String
  version   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorites {
  id      String               @id @default(uuid())
  artists FavoritesOnArtists[]
  albums  FavoritesOnAlbums[]
  tracks  FavoritesOnTracks[]
}

model FavoritesOnArtists {
  id          String @id @default(uuid())
  favoritesId String
  artistId    String

  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  artist    Artist    @relation(fields: [artistId], references: [id])

  @@unique([favoritesId, artistId])
}

model FavoritesOnAlbums {
  id          String @id @default(uuid())
  favoritesId String
  albumId     String

  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  album     Album     @relation(fields: [albumId], references: [id])

  @@unique([favoritesId, albumId])
}

model FavoritesOnTracks {
  id          String @id @default(uuid())
  favoritesId String
  trackId     String

  favorites Favorites @relation(fields: [favoritesId], references: [id], onDelete: Cascade)
  track     Track     @relation(fields: [trackId], references: [id])

  @@unique([favoritesId, trackId])
}

model Artist {
  id     String  @id @default(uuid())
  name   String
  grammy Boolean

  tracks             Track[]
  albums             Album[]
  FavoritesOnArtists FavoritesOnArtists[]
}

model Album {
  id                String              @id @default(uuid())
  name              String
  year              Int
  artist            Artist?             @relation(fields: [artistId], references: [id])
  artistId          String?
  tracks            Track[]
  FavoritesOnAlbums FavoritesOnAlbums[]
}

model Track {
  id                String              @id @default(uuid())
  name              String
  duration          Int
  artist            Artist?             @relation(fields: [artistId], references: [id])
  artistId          String?
  album             Album?              @relation(fields: [albumId], references: [id])
  albumId           String?
  FavoritesOnTracks FavoritesOnTracks[]
}
